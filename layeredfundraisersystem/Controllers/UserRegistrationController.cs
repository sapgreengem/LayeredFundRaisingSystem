using FundRaiserSystemData;
using FundRaiserSystemEntity;
using FundRaiserSystemService;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Configuration;
using System.IO;
using System.Net.Mail;
using System.Security.Cryptography;
using System.Text;

namespace layeredFundRaiserSystem.Controllers
{
    public class UserRegistrationController : Controller
    {
        // GET: UserRegistration
        public static string GeneratedLink = "";

        [HttpGet]
        public ActionResult Index()
        {
            return View();
        }
        [HttpPost]
        public ActionResult Index(FormCollection collection)
        {
            IUserLoginService service = ServiceFactory.GetUserLoginService();
            UserLogin user = new UserLogin();
            string email = collection["Email"].ToString();
            string password = collection["Password"].ToString();
            string confirmPassword = collection["confirmPassword"].ToString();

            ViewBag.x = email;

            if (password == confirmPassword)
            {
                if (sendEmail(email))
                {
                    user.Email = email;
                    user.AutoGeneratedLink = GeneratedLink;
                    user.Password = password;
                    user.UserCreationDate = DateTime.Now;
                    user.Status = "Pending";
                    service.Insert(user);
                    ViewBag.message = "An email is sent to your email. Click that link to verify";
                }
            }
            else
            {
                ViewBag.PassError = "Password and Confirm Password not matched";
            }
            return View();
        }

        [HttpGet]
        public ActionResult Email(string id)
        {
            IUserLoginService service = ServiceFactory.GetUserLoginService();
            IEnumerable<UserLogin> login = service.GetAll().Where(a => a.Status == "Pending").Where(a => a.AutoGeneratedLink == id);

            if (login != null)
            {
                UserLogin userLogin = new UserLogin();
                foreach (var item in login)
                {
                    userLogin.UserId = item.UserId;
                    userLogin.AutoGeneratedLink = "";
                    userLogin.Status = "Active";
                    userLogin.Email = item.Email;
                    userLogin.Password = item.Password;
                    userLogin.UserCreationDate = DateTime.Now;
                }
                service.Update(userLogin);
                Session["Login"] = userLogin.UserId;
                return Redirect("/FillAllInfo/Index/");
            }
            else
            {
                return RedirectToAction("Index", "User", new { id = "Error" });
            }

        }
        public bool sendEmail(string email)
        {
            bool result = false;
            string systemMailAddress = "jaowatraihan@gmail.com";
            string systemPassword = "deluxismykeyboard12";
            string host = "localhost:16720";//Domain Name

            Guid obj = new Guid();
            GeneratedLink = obj.ToString();

            string MessageBody =
                "<strong>Dear "+ email + "</strong>" +
                "<p>Click <a href='http://" + host + "/UserRegistration/Email/" + GeneratedLink + "' >Here</a> to Verify Your Email</p>";

            MailMessage mailMessage = new MailMessage();
            mailMessage.To.Add(email);
            mailMessage.From = new MailAddress(systemMailAddress);
            mailMessage.Subject = "Email Verification";
            mailMessage.Body = MessageBody;
            mailMessage.IsBodyHtml = true;

            SmtpClient smtp = new SmtpClient();
            smtp.Host = "smtp.gmail.com";
            smtp.Port = 587;//587 for Gmail
            smtp.UseDefaultCredentials = false;
            smtp.Credentials = new System.Net.NetworkCredential(systemMailAddress, systemPassword); // Enter sender's Email and password   
            smtp.EnableSsl = true;
            smtp.Send(mailMessage);

            int x = 1;
            if (x == 1)
                result = true;

            return result;
        }

        [HttpGet]
        public JsonResult VerifyEmail(string id)
        {
            string msg = "";
            IUserLoginService service = ServiceFactory.GetUserLoginService();
            IEnumerable<UserLogin> login = service.GetAll().Where(a => a.Email == id);

            if (login.Count() != 0)
                msg = "Email already exist";
            else
                msg = "";

            return Json(new { message = msg }, JsonRequestBehavior.AllowGet);
        }
    }
}